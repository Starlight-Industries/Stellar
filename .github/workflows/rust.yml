name: Build stellar 💫
on:
  push:
    branches: ["main", "master"]
    tags: ["v*"]
  pull_request:
    branches: ["main", "master"]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: 📥 Clone repository
        uses: actions/checkout@v3

      - name: 🛠️ Install cross-compilation dependencies (Ubuntu🐧)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user

      - name: 🛠️ Install cross-compilation dependencies (macOS🍎)
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross

      - name: 🔧 Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      - name: 🏗️ Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: 🧪 Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          QEMU_LD_PREFIX: /usr/aarch64-linux-gnu

      - name: 📝 Rename binary
        id: rename
        run: |
          binary_name="stellar"
          if [ "${{ runner.os }}" == "Windows" ]; then
            binary_name="stellar.exe"
          fi

          cd target/${{ matrix.target }}/release
          mv "$binary_name" "stellar-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "binary_name=stellar-${{ matrix.os }}-${{ matrix.arch }}.exe" >> $GITHUB_OUTPUT
          else
            echo "binary_name=stellar-${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: stellar-${{ matrix.os }}-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${{ steps.rename.outputs.binary_name }}
          if-no-files-found: error

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
