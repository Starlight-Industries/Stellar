name: Build
on:
  push:
    tags: ["v*"]
env:
  CARGO_TERM_COLOR: always
jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            binary_name: stellar-linux-x86_64.zip
            file_extension: ""
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            binary_name: stellar-linux-aarch64.zip
            file_extension: ""
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            binary_name: stellar-macos-x86_64.zip
            file_extension: ""
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            binary_name: stellar-macos-aarch64.zip
            file_extension: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: 📥 Clone repository
        uses: actions/checkout@v3
      - name: 🛠️ Install cross-compilation dependencies (Ubuntu AMD)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user
      - name: 🛠️ Install cross-compilation dependencies (macOS🍎)
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross
      - name: 🔧 Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal
      - name: 🏗️ Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      - name: 📦 Prepare binary and checksum
        run: |
          # Create temp directory for zip contents
          mkdir -p temp_release
          # Copy binary to temp directory
          cp target/${{ matrix.target }}/release/stellar${{ matrix.file_extension }} temp_release/stellar${{ matrix.file_extension }}
          chmod +x temp_release/stellar${{ matrix.file_extension }}
          # Create SHA256 checksum
          cd temp_release
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            certutil -hashfile stellar${{ matrix.file_extension }} SHA256 > stellar.sha256
            # Remove certutil's extra output, keeping only the hash
            sed -i '1d' stellar.sha256
            sed -i '2d' stellar.sha256
          else
            shasum -a 256 stellar${{ matrix.file_extension }} > stellar.sha256
          fi
          # Create zip with both files at root level
          mkdir -p ../release
          zip ../release/${{ matrix.binary_name }} stellar${{ matrix.file_extension }} stellar.sha256
          cd ..
          rm -rf temp_release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary_name }}
          path: release/${{ matrix.binary_name }}
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*/*.zip
          name: Release ${{ github.ref_name }}
          body: |
            This is the release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
