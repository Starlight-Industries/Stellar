name: Build

on:
  push:
    tags: ["v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
            binary_name: stellar-linux-x86_64.zip
            file_extension: ""
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
            binary_name: stellar-linux-aarch64.zip
            file_extension: ""
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            binary_name: stellar-macos-x86_64.zip
            file_extension: ""
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            binary_name: stellar-macos-aarch64.zip
            file_extension: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Clone repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu AMD)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user

      - name: üõ†Ô∏è Install cross-compilation dependencies (macOSüçé)
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross

      - name: üîß Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      - name: üèóÔ∏è Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: üì¶ Prepare binary
        run: |
          chmod +x target/${{ matrix.target }}/release/stellar${{ matrix.file_extension }}
          mkdir -p release
          zip release/${{ matrix.binary_name }} target/${{ matrix.target }}/release/stellar${{ matrix.file_extension }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary_name }}
          path: release/${{ matrix.binary_name }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release

      - name: Create GitHub release ‚úàÔ∏è
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This is the release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Upload zip files to release üì§
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/${{ matrix.binary_name }}
          asset_name: ${{ matrix.binary_name }}
          asset_content_type: application/zip
