name: Build

on:
  push:
    tags: ["v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          # - os: windows-latest
          #   arch: x86_64
          #   target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   arch: aarch64
          #   target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Clone repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu AMD)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user

      - name: üõ†Ô∏è Install cross-compilation dependencies (macOSüçé)
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross

      - name: üîß Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      # - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu ARM)
      #   if: matrix.target == 'aarch64-unknown-linux-gnu'
      #   run: |
      #     env CROSS_CONTAINER_IN_CONTAINER=true
      #     cargo install cross

      - name: üèóÔ∏è Build
        uses: actions-rs/cargo@v1
        # if: matrix.target != 'aarch64-unknown-linux-gnu'
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/stellar*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release

      - name: Create GitHub release ‚úàÔ∏è
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This is the release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Zip all binaries üì•
        run: |
          find release -type f ! -name "*.d" -exec sh -c 'cp "$1" "$(dirname "$1" | xargs basename)_$(basename "$1")"' _ {} \;
          chmod +x *apple-darwin*
          chmod +x *linux-gnu*

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: stellar-*
          tag: main
          overwrite: true
          file_glob: true
